# ---------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ---------------------------------------------------------------------------

name: e2e

on:
  pull_request:
    branches:
      - main
      - 'release-*'
    paths-ignore:
      - 'docs/**'
      - '**.adoc'
      - '**.md'
      - 'LICENSE'
  push:
    branches:
      - main
      - 'release-*'
    paths-ignore:
      - 'docs/**'
      - '**.adoc'
      - '**.md'
      - 'LICENSE'

concurrency:
  group: ${{ github.head_ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  kubernetes:

    runs-on: ubuntu-20.04

    steps:
      - name: Cleanup
        run: |
          ls -lart
          echo "Initial status:"
          df -h

          echo "Cleaning up resources:"
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          docker rmi $(docker image ls -aq)

          echo "Final status:"
          df -h

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Init directories
        run: |
          TEMP_DIR="$(pwd)/tmp"
          mkdir -p "${TEMP_DIR}"
          echo "TEMP_DIR=${TEMP_DIR}" >> $GITHUB_ENV

          mkdir -p "$(pwd)/bin"
          echo "$(pwd)/bin" >> $GITHUB_PATH

      - name: Set Go
        uses: actions/setup-go@v3
        with:
          go-version: v1.18

      - name: Container image registry
        run: |
          docker run -d --restart=always -p 5000:5000 --name registry registry:2.8.1

          export REGISTRY_ADDRESS=$(hostname -i):5000
          echo "REGISTRY_ADDRESS=${REGISTRY_ADDRESS}" >> $GITHUB_ENV
          echo "Container image registry started at ${REGISTRY_ADDRESS}"

          KIND_CONFIG_FILE=${{ env.TEMP_DIR }}/kind.yaml
          echo "KIND_CONFIG_FILE=${KIND_CONFIG_FILE}" >> $GITHUB_ENV
          envsubst < ./test/e2e/kind.yaml > ${KIND_CONFIG_FILE}

      - name: Get KinD version
        run: |
          KIND_VERSION=$(make get-kind-version)
          echo "KIND_VERSION=${KIND_VERSION}" >> $GITHUB_ENV
          echo ${KIND_VERSION}

      - name: Kubernetes KinD control cluster
        uses: helm/kind-action@v1.4.0
        with:
          cluster_name: kcp-control-cluster
          version: ${{ env.KIND_VERSION }}
          config: ${{ env.KIND_CONFIG_FILE }}

      - name: Kubernetes KinD compute cluster
        uses: helm/kind-action@v1.4.0
        with:
          cluster_name: kcp-data-cluster
          version: ${{ env.KIND_VERSION }}
          config: ${{ env.KIND_CONFIG_FILE }}

      - name: Info
        run: |
          echo "Control plane cluster:"
          kubectl --context kind-kcp-control-cluster cluster-info
          kubectl --context kind-kcp-control-cluster describe nodes
          kind get kubeconfig --name kcp-control-cluster > ${TEMP_DIR}/control.kubeconfig

          echo "Data plane cluster:"
          kubectl --context kind-kcp-data-cluster cluster-info
          kubectl --context kind-kcp-data-cluster describe nodes
          kind get kubeconfig --name kcp-data-cluster > ${TEMP_DIR}/data.kubeconfig

      - name: Run kcp and camel-kcp
        run: |
          echo "Building kcp"
          make kcp

          echo "Building camel-kcp"
          make build

          echo "Installing kustomize"
          make kustomize

          KCP_LOG_FILE="${TEMP_DIR}"/kcp.log
          echo "KCP_LOG_FILE=${KCP_LOG_FILE}" >> $GITHUB_ENV
          echo "Starting kcp, sending logs to ${KCP_LOG_FILE}"
          kcp start --batteries-included=+user > ${KCP_LOG_FILE} 2>&1 &
          KCP_PID=$!
          echo "KCP_PID=${KCP_PID}" >> $GITHUB_ENV

          echo "Waiting 30 seconds..."
          sleep 30

          if ! ps -p ${KCP_PID}; then
            echo "KCP failed to start, see ${KCP_LOG_FILE} for info."
            exit 1
          fi

          export KUBECONFIG=$(pwd)/.kcp/admin.kubeconfig

          kubectl kcp ws use root

          # Get root scheduling APIExport identity hash
          SCHEDULING_IDENTITY_HASH=$(kubectl get apiexport scheduling.kcp.dev -o json | jq -r .status.identityHash)

          # Install camel-k ClusterWorkspaceType
          kustomize build config/kcp/workspace_type | kubectl apply --server-side -f -

          kubectl kcp ws use root:compute

          # Get root compute APIExport identity hash
          KUBERNETES_IDENTITY_HASH=$(kubectl get apiexport kubernetes -o json | jq -r .status.identityHash)

          # Grant authenticated users permission to bind the root compute APIExport
          # To be removed when https://github.com/kcp-dev/kcp/pull/2618 lands
          cat <<EOF | kubectl apply -f -
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: system:kcp:apiexport:kubernetes:bind
          rules:
            - apiGroups:
                - apis.kcp.dev
              resources:
                - apiexports
              resourceNames:
                - kubernetes
              verbs:
                - bind
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: system:kcp:authenticated:apiexport:kubernetes:bind
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: system:kcp:apiexport:kubernetes:bind
          subjects:
            - apiGroup: rbac.authorization.k8s.io
              kind: Group
              name: system:authenticated
          EOF

          kubectl kcp ws use root

          # Create service workspace
          kubectl kcp ws create camel-k --enter

          # Create control and data plane locations
          cat <<EOF | kubectl apply -f -
          apiVersion: scheduling.kcp.io/v1alpha1
          kind: Location
          metadata:
            name: control
            labels:
              org.apache.camel/control-plane: ""
          spec:
            resource:
              group: workload.kcp.io
              resource: synctargets
              version: v1alpha1
            instanceSelector:
              matchExpressions:
                - key: org.apache.camel/control-plane
                  operator: Exists
          EOF

          cat <<EOF | kubectl apply -f -
          apiVersion: scheduling.kcp.io/v1alpha1
          kind: Location
          metadata:
            name: data
            labels:
              org.apache.camel/data-plane: ""
          spec:
            resource:
              group: workload.kcp.io
              resource: synctargets
              version: v1alpha1
            instanceSelector:
              matchExpressions:
                - key: org.apache.camel/data-plane
                  operator: Exists
          EOF

          # Create sync targets
          kubectl create namespace kcp-syncer
          KCP_SYNCER_IMAGE="ghcr.io/kcp-dev/kcp/syncer:$(make get-kcp-version)"

          kubectl kcp workload sync control --kcp-namespace kcp-syncer --syncer-image=${KCP_SYNCER_IMAGE} -o - | kubectl --kubeconfig ${TEMP_DIR}/control.kubeconfig apply --server-side -f -
          kubectl label synctarget control "org.apache.camel/control-plane="
          kubectl wait --timeout=300s --for=condition=Ready=true synctarget control

          kubectl kcp workload sync data --kcp-namespace kcp-syncer --syncer-image=${KCP_SYNCER_IMAGE} -o - | kubectl --kubeconfig ${TEMP_DIR}/data.kubeconfig apply --server-side -f -
          kubectl label synctarget data "org.apache.camel/data-plane="
          kubectl wait --timeout=300s --for=condition=Ready=true synctarget data

          # Install service APIs
          kustomize fn run config/kcp --image gcr.io/kpt-fn/apply-setters:v0.2.0 -- \
          kubernetes-identity-hash="${KUBERNETES_IDENTITY_HASH}" \
          scheduling-identity-hash="${SCHEDULING_IDENTITY_HASH}"
          kustomize build config/kcp | kubectl apply --server-side -f -

          # Install Kamelets
          (cd camel-k && make bundle-kamelets)
          export KAMELET_CATALOG_DIR=./camel-k/build/_kamelets

          # Start camel-kcp
          CAMEL_KCP_LOG_FILE="${TEMP_DIR}"/camel-kcp.log
          echo "CAMEL_KCP_LOG_FILE=${CAMEL_KCP_LOG_FILE}" >> $GITHUB_ENV

          kustomize fn run config/deploy/local --image gcr.io/kpt-fn/apply-setters:v0.2.0 -- registry-address=${REGISTRY_ADDRESS}

          echo "Starting camel-kcp, writing logs to ${CAMEL_KCP_LOG_FILE}"
          camel-kcp --config=config/deploy/local/config.yaml > ${CAMEL_KCP_LOG_FILE} 2>&1 &
          CAMEL_KCP_PID=$!
          echo "CAMEL_KCP_PID=${CAMEL_KCP_PID}" >> $GITHUB_ENV

          echo "Waiting 15 seconds..."
          sleep 15

          if ! ps -p ${CAMEL_KCP_PID}; then
            echo "camel-kcp failed to start, see ${CAMEL_KCP_LOG_FILE} for info."
            exit 1
          fi

      - name: Run e2e tests
        run: |
          export KUBECONFIG=$(pwd)/.kcp/admin.kubeconfig

          kubectl config use-context user
          kubectl kcp ws

          TEST_WORKSPACE=$(kubectl kcp ws . --short) make e2e

      - name: Shutdown camel-kcp
        if: ${{ always() }}
        run: |
          echo "Kill camel-kcp process"
          kill ${{ env.CAMEL_KCP_PID }}

          echo "Printing camel-kcp logs"
          cat ${{ env.CAMEL_KCP_LOG_FILE }}

      - name: Shutdown kcp
        if: ${{ always() }}
        run: |
          echo "Kill KCP process"
          kill ${{ env.KCP_PID }}

          echo "Printing KCP logs"
          cat ${{ env.KCP_LOG_FILE }}
